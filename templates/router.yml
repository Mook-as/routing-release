name: (( config_from_cf.cf_deployment_name "-routing" ))

releases:
- name: cf-routing
  version: latest
- name: cf
  version: latest

compilation:
  network: router1
  reuse_compilation_vms: true
  workers: 6
  cloud_properties: (( iaas_settings.compilation_cloud_properties ))

update:
  canaries: 1
  canary_watch_time: 5000-120000
  max_in_flight: 1
  serial: false
  update_watch_time: 5000-120000

networks:
- name: router1
  type: manual
  subnets: (( iaas_settings.subnet_configs.router1.subnets ))
- name: router2
  type: manual
  subnets: (( iaas_settings.subnet_configs.router2.subnets ))
- name: router3
  type: manual
  subnets: (( iaas_settings.subnet_configs.router3.subnets ))

resource_pools:
  - name: tcp_router_z1
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z1.cloud_properties ))

  - name: tcp_router_z2
    network: router2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z2.cloud_properties ))

  - name: tcp_router_z3
    network: router3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z3.cloud_properties ))

  - name: tcp_emitter_z1
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z1.cloud_properties ))

  - name: tcp_emitter_z2
    network: router2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z2.cloud_properties ))

  - name: tcp_emitter_z3
    network: router3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z3.cloud_properties ))

  - name: small_errand
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.small_errand.cloud_properties ))


jobs:
  - name: tcp_router_z1
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z1.instances || 1 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z1 || 1024 ))
    resource_pool: tcp_router_z1
    networks:
      - name: router1
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z1
  - name: tcp_router_z2
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z2.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z2 || 1024 ))
    resource_pool: tcp_router_z2
    networks:
      - name: router2
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z2
  - name: tcp_router_z3
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z3.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z3 || 1024 ))
    resource_pool: tcp_router_z3
    networks:
      - name: router3
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z3
  - name: tcp_emitter_z1
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z1.instances || 1 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z1 || 1024 ))
    resource_pool: tcp_emitter_z1
    networks:
      - name: router1
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z1
  - name: tcp_emitter_z2
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z2.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z2 || 1024 ))
    resource_pool: tcp_emitter_z2
    networks:
      - name: router2
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z2
  - name: tcp_emitter_z3
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z3.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z3 || 1024 ))
    resource_pool: tcp_emitter_z3
    networks:
      - name: router3
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z3
  - name: router_acceptance_tests
    templates: (( base_job_templates.acceptance_tests_errand ))
    lifecycle: errand
    instances: (( instance_count_overrides.small_errand.instances || 1 ))
    networks:
    - name: router1
    resource_pool: small_errand

property_overrides: (( merge ))
iaas_settings: (( merge ))
instance_count_overrides: (( merge ))
persistent_disk_overrides: (( merge ))
config_from_cf: (( merge ))
config_from_diego: (( merge ))

properties:
  metron_agent:
    deployment: (( name ))
  metron_endpoint:
    shared_secret: (( config_from_cf.metron_endpoint.shared_secret ))
  loggregator:
    etcd:
      machines: (( config_from_cf.loggregator.etcd_machines ))
  consul:
    agent:
      log_level: (( config_from_cf.consul.log_level ))
      servers:
        lan: (( config_from_cf.consul.lan_servers ))
    ca_cert: (( config_from_cf.consul.ca_cert ))
    agent_cert: (( config_from_cf.consul.agent_cert ))
    agent_key: (( config_from_cf.consul.agent_key ))
    encrypt_keys: (( config_from_cf.consul.encrypt_keys ))
    require_ssl: (( config_from_cf.consul.require_ssl ))
    server_cert: (( config_from_cf.consul.server_cert ))
    server_key: (( config_from_cf.consul.server_key ))
  router:
    router_configurer:
      debug_addr: (( property_overrides.router_configurer.debug_addr ))
      tcp_config_file: (( property_overrides.router_configurer.tcp_config_file ))
      tcp_config_file_template: (( property_overrides.router_configurer.tcp_config_file_template ))
      tcp_stats_unix_socket: (( property_overrides.router_configurer.tcp_stats_unix_socket ))
      tcp_stats_collection_interval: (( property_overrides.router_configurer.tcp_stats_collection_interval ))
      uaa_port: (( config_from_cf.uaa.port ))
      tcp_router_secret: (( config_from_cf.uaa.clients.tcp_router.secret ))
      log_level: (( property_overrides.router_configurer.log_level ))
      routing_api_auth_disabled: (( config_from_cf.routing-api.auth_disabled))
    tcp_emitter:
      bbs:
        api_location: (( "bbs.service.cf.internal:8889" ))
        ca_cert: (( config_from_diego.bbs.ca_cert ))
        require_ssl: (( config_from_diego.bbs.require_ssl || nil ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
      debug_addr: (( property_overrides.tcp_emitter.debug_addr ))
      log_level: (( property_overrides.tcp_emitter.log_level ))
      uaa_port: (( config_from_cf.uaa.port ))
      uaa_ssl_port: (( config_from_cf.uaa.ssl.port ))
      skip_oauth_tls_verification: (( property_overrides.tcp_emitter.skip_oauth_tls_verification))
      tcp_emitter_secret: (( config_from_cf.uaa.clients.tcp_emitter.secret ))
      lock_ttl: (( property_overrides.tcp_emitter.lock_ttl || nil ))
      lock_retry_interval: (( property_overrides.tcp_emitter.lock_retry_interval || nil ))
      session_name: (( property_overrides.tcp_emitter.session_name || nil ))
      routing_api_auth_disabled: (( config_from_cf.routing-api.auth_disabled))
    haproxy:
      request_timeout_in_seconds: (( property_overrides.haproxy.request_timeout_in_seconds || 300 ))
      health_check_port: (( property_overrides.haproxy.health_check_port || 80 ))
    acceptance_tests:
      router_api_addresses: (( property_overrides.acceptance_tests.router_api_addresses ))
      router_api_port: (( property_overrides.acceptance_tests.router_api_port ))
      uaa_port: (( config_from_cf.uaa.port ))
      tcp_emitter_secret: (( config_from_cf.uaa.clients.tcp_emitter.secret ))
      bbs:
        api_location: (( "bbs.service.cf.internal:8889" ))
        ca_cert: (( config_from_diego.bbs.ca_cert ))
        require_ssl: (( config_from_diego.bbs.require_ssl || nil ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))

base_job_templates:
  tcp_router:
    - name: consul_agent
      release: cf
    - name: haproxy
      release: cf-routing
    - name: router_configurer
      release: cf-routing
    - name: metron_agent
      release: cf
  tcp_emitter:
    - name: consul_agent
      release: cf
    - name: tcp_emitter
      release: cf-routing
    - name: metron_agent
      release: cf
  acceptance_tests_errand:
    - name: acceptance_tests
      release: cf-routing
    - name: consul_agent
      release: cf
