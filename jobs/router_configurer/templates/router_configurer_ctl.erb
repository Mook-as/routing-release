#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/router_configurer
LOG_DIR=/var/vcap/sys/log/router_configurer
CONF_DIR=/var/vcap/jobs/router_configurer/config
PIDFILE=$RUN_DIR/router_configurer.pid

source /var/vcap/packages/routing_utils/pid_utils.sh

case $1 in

  start)
    set +e
    host <%= p("dns_health_check_host") %>
    if [[ "0" != "$?" ]]; then
      echo "DNS is not up"
      exit 1
    fi
    set -e

    pid_guard $PIDFILE "router_configurer"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown -R vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    tee_output_to_sys_log "${LOG_DIR}"

    echo $$ > /var/vcap/sys/run/router_configurer/router_configurer.pid

    exec chpst -u vcap:vcap /var/vcap/packages/router_configurer/bin/router-configurer \
      -debugAddr=<%= p("router.router_configurer.debug_addr") %> \
      -logLevel=<%= p("router.router_configurer.log_level") %> \
      -tcpLoadBalancerConfig=<%= p("router.router_configurer.tcp_config_file") %> \
      -tcpLoadBalancerBaseConfig=<%= p("router.router_configurer.tcp_config_file_template") %> \
      -config=$CONF_DIR/router_configurer.yml \
      -tcpLoadBalancerStatsUnixSocket=<%= p("router.router_configurer.tcp_stats_unix_socket") %> \
      -statsCollectionInterval=<%= p("router.router_configurer.tcp_stats_collection_interval") %>

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: router_configurer_ctl {start|stop}"

    ;;

esac
